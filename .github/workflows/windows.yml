name: windows

on:
  push:
    branches: [master]
    tags:
      - "v*"

jobs:
  package-zip:
    strategy:
      matrix:
        build-type: [debug, release]
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up build variables
        env:
          BUILD_TYPE: ${{ matrix.build-type }}
        run: bash ./.github/scripts/setup_build_variables.sh

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: "5.15.2"
          host: "windows"
          install-deps: "true"
          arch: "win64_msvc2019_64"

      - name: Set up nmake
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build and install zlib
        run: |
          curl -sSL -o zlib131.zip https://zlib.net/zlib131.zip
          unzip.exe zlib131.zip
          cd zlib-1.3.1
          mkdir build
          cd build && cmake .. -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX="$env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE"
          nmake
          nmake install

      - name: Build and install libpng
        run: |
          curl -sSL -o lpng1637.zip https://download.sourceforge.net/libpng/lpng1637.zip
          unzip.exe lpng1637.zip
          cd lpng1637
          mkdir build
          cd build && cmake .. -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX="$env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE"
          nmake
          nmake install

      - name: Build and install webp
        run: |
          git clone --depth 1 https://github.com/webmproject/libwebp.git
          cd libwebp
          mkdir build
          cd build && cmake .. -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX="$env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE"
          nmake
          nmake install

      - name: Build and install giflib
        run: |
          curl -sSL -o giflib-master.zip https://codeload.github.com/xbmc/giflib/zip/master
          unzip giflib-master.zip
          cd giflib-master
          mkdir build
          cd build && cmake .. -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX="$env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE"
          nmake
          nmake install

      - name: Build and install libjpeg
        run: |
          git clone --depth 1 https://github.com/libjpeg-turbo/libjpeg-turbo.git
          cd libjpeg-turbo
          mkdir build
          cd build && cmake .. -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX="$env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE"
          nmake
          nmake install

      - name: Build and install openjpeg
        run: |
          git clone --depth 1 https://github.com/uclouvain/openjpeg.git
          cd openjpeg
          mkdir build
          cd build && cmake .. -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX="$env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE"
          nmake
          nmake install

      - name: Build and install jbigkit
        run: |
          git clone --depth 1 https://github.com/zdenop/jbigkit
          cd jbigkit
          mkdir build
          cd build && cmake .. -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX="$env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE"
          nmake
          nmake install

      - name: Build and install zstd
        run: |
          git clone --depth 1 https://github.com/facebook/zstd.git
          cd zstd/build/cmake
          mkdir build
          cd build && cmake .. -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX="$env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE"
          nmake
          nmake install

      - name: Build and install libtiff
        run: |
          git clone --depth 1 https://gitlab.com/libtiff/libtiff
          cd libtiff
          cd build && cmake .. -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX="$env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE"
          nmake
          nmake install

      - name: Build and install leptonica
        run: |
          git clone --depth 1 https://github.com/DanBloomberg/leptonica.git
          cd leptonica
          mkdir build
          cd build && cmake .. -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX="$env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE" -DBUILD_SHARED_LIBS=ON -DBUILD_PROG=OFF -DSW_BUILD=OFF
          nmake
          nmake install
          ln -s $env:INSTALL_PREFIX/lib/leptonica*.lib $env:INSTALL_PREFIX/lib/leptonica.lib

      - name: Build and install tessarect
        run: |
          git clone --depth 1 https://github.com/tesseract-ocr/tesseract.git
          cd tesseract
          mkdir build
          cd build && cmake .. -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX="$env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE" -DBUILD_SHARED_LIBS=ON -DBUILD_TRAINING_TOOLS=OFF -DOPENMP_BUILD=OFF -DSW_BUILD=OFF
          nmake
          nmake install
          ln -s $env:INSTALL_PREFIX/lib/tesseract*.lib $env:INSTALL_PREFIX/lib/tesseract.lib

      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -G"NMake Makefiles" -DCMAKE_PREFIX_PATH="$env:INSTALL_PREFIX" -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE"
          nmake

      - name: Download Trained Data
        run: |
          curl -L https://github.com/tesseract-ocr/tessdata/raw/main/eng.traineddata --output eng.traineddata

      - name: Package
        run: |
          mkdir packageDir/tessdata
          cp build/src/ksnip-plugin-ocr.* packageDir/
          cp $env:INSTALL_PREFIX/bin/*.dll packageDir/
          cp eng.traineddata packageDir/tessdata
          7z a ksnip-plugin-ocr-$env:VERSION-windows.zip ./packageDir/*

      - name: Upload files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -L https://github.com/probonopd/uploadtool/raw/master/upload.sh --output upload.sh
          bash upload.sh ksnip-plugin-ocr-*.zip

